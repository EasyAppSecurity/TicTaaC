name: Default Threats Library
version: 1.0.0

rules:
  - information-disclosure-in-transit
    title: Information Disclosure and Tampering in Transit for {flow.name}
    severity: Medium
    categories: information-disclosure, tampering
    expression: (flow.encryption == no) or (flow.encryption == undefined)
    exclude: flow.inScope == false
    description: In network eavesdropping attacks, hackers look for weak connections between clients and servers. By exploiting these weak connections, hackers intercept data packets traversing the network. Any network, web or email traffic, if not encrypted, can be read by the hacker.
    remediation: Ensure strong TLS is configured for the {flow.name} connection

  - information-disclosure-at-rest
    title: Information Disclosure and Tampering at Rest for {target.name}
    severity: High
    categories: information-disclosure, tampering
    expression: (target.type == database) and ((target.storedAssets contain sensitive) or (target.storedAssets contain undefined))
    exclude: flow.inScope == false
    description: In case if an attacker can access lost, stolen, or inappropriately decommissioned hardware, or copy the entire filesystem from the server and run it on its own hardware, as a result the sensitive assets stored in {target.name} will be compromised
    remediation: 1. Ensure sensitive information is encrypted at rest level in {target.name} using recommended algorithms 2. Ensure encryption keys are properly protected (for example, stored at Vault)

  - database-broad-development-team-access
    title: {target.name} broad development team access
    severity: Medium
    categories: information-disclosure, tampering
    expression: target.type == database
    exclude: flow.inScope == false
    description: In case if broad product development team has unrestricted access to the production environment, the chances of sensitive information disclosure or the whole system compromise are increasing
    remediation: 1. Ensure only limited number of trusted employees has access to the production environment 2. Consider transfering the production support to the special dedicated team 3. Consider usage of the solutions like Bastion Hosts and privilege access management systems for the production env access

  - anonymous-access
    title: Anonymous access to {target.name}
    severity: High
    categories: spoofing, information-disclosure
    expression: (flow.authenticationMethod == anonymous) or (flow.authenticationMethod == undefined)
    exclude: flow.inScope == false
    description: In case of if anonymous access to {target.name} is enabled, a potential attacker can gather additional information about the target using this public-available source
    remediation: 1. Enumerate all the publicly-accessible entrypoints on {target.name} 2. Consider access-control protection for the entrypoints with unwanted anonymous access

  - weak-authentication-method
    title: Weak authentication method for {target.name} access
    severity: High
    categories: spoofing
    expression: flow.authenticationMethod == undefined
    exclude: flow.inScope == false
    description: In case of of weak authentication for {target.name} connection, a potential attacker can easily spoof another users identity or gain access to any accounts credentials
    remediation: Consider usage of strong authentication method for {target.name} access (OpenID, Kerberos, etc)

  - ntlm-protocol-usage
    title: NTLM protocol usage for {target.name} access
    severity: Medium
    categories: spoofing
    expression: flow.authenticationMethod == ntlm
    exclude: flow.inScope == false
    description: The challenge with having NTLM in your network is that it is easily exploitable and puts an organization at risk for a breach
    remediation: 1. Ensure LM and NTLMv1 are disabled completely, allowing only the safer NTLMv2 (at least it mitigates some of the replay attacks) or use Kerberos if it is possible 2. If you cant disable the protocol, start with auditing all NTLM traffic, followed by analysis of servers and users that use NTLM, and ultimately determining which uses can be abandoned and which should be set as an exception after restricting NTLM

  - credentials-brute-force
    title: {target.name} credentials brute-force
    severity: High
    categories: spoofing
    expression: (flow.authenticationMethod == credentials) or (flow.authenticationMethod == basic)
    exclude: (flow.inScope == false) or (target.type == database)
    description: In case of of basic or simple password authentication on {target.name} side, a potential attacker can brute-force weak credentials and hijack any account
    remediation: 1. Consider usage of rate-limit protection on {target.name} side 2. (If applicable) Consider usage of MFA on {target.name} side

  - default-account-disabling
    title: {target.name} default account disabling
    severity: High
    categories: spoofing, elevation-of-privilege
    expression: target.type == database
    exclude: flow.inScope == false
    description: A default account for {target.name} (for example, admin, root, sa, postgre, etc) may be used by an attacker to gain access to the information and assets stored in the storage
    remediation: Ensure the default account is not used or disabled/locked-out on {target.name} side

  - admin-access-hijacking
    title: {target.name} administrative access hijacking
    severity: High
    categories: spoofing, elevation-of-privilege
    expression: flow.authorization == admin
    exclude: flow.inScope == false
    description: In case if potential attacker can hijack administrative account to {target.name} or compromise it, he will gain an unlimited access to {target.name} data and functional assets
    remediation: 1. Consider protection of administrative accounts with MFA on {target.name} side if it is possible 2. Consider administrative account lockout, replacement by least-privilege account or permissions limitation

  - excessive-permissions
    title: {target.name} access with excessive permissions
    severity: Medium
    categories: elevation-of-privilege
    expression: (flow.authorization == admin) or (flow.authorization == readWrite)
    exclude: (flow.inScope == false) or (source.type == proxyServer) or (target.type == proxyServer)
    description: If {source.name} has excessive permissions (admin, root, etc) for {target.name} connection, in case of {source.name} compromise, a potential attacker can gain access to an extra permissions on {target.name}
    remediation: 1. Ensure least-privilege account (for example, read-only) is used by {target.name} for {source.name} connection with fine-grained access only to the required operations and assets 2. Ensure deny by default principle is followed

  - local-account-management
    title: Local account management on {target.name}
    severity: Medium
    categories: spoofing, elevation-of-privilege
    expression: (flow.accountManagement == localAccount) or (flow.accountManagement == undefined)
    exclude: (flow.inScope == false) or (source within demilitarized-zone) or (source within closed-perimeter)
    description: In case of inappropriate account management on {target.name} side (for example, if account credentials are stored at {target.name} configuration file), it can lead to weak password complexity or rotation issues, that can be used by an attacker to brute force the credentials or for accounts enumeration
    remediation: Consider transferring the responsibility of account management to centralized SSO or Identity and Access Management system

  - storage-in-dmz
    title: {target.name} in DMZ
    severity: High
    categories: elevation-of-privilege, information-disclosure, tampering
    expression: (target.type == database) and (target within demilitarized-zone)
    exclude: flow.inScope == false
    description: In case the storage with sensitive information is located in a DMZ, it can be easily discovered and attacked by an internal as well as an external threat agent
    remediation: Consider placing {target.name} in a secure isolated from internet access segment or in a internal private sub-net

  - storage-broad-company-network-access
    title: Broad {target.name} access from the Company network
    severity: Medium
    categories: elevation-of-privilege, information-disclosure, tampering
    expression: (target.type == database) and (source within corporate-network)
    exclude: flow.inScope == false
    description: In case if there are no restrictions for {target.name} connection from the whole Company internal network, the chances of sensitive information disclosure in {target.name} or the whole system compromise are increasing due to insider or rogue employee threat
    remediation: Whitelist connection to {target.name} with firewall rules or Network ACL to restrict access to storage by anyone and from anywhere within the internal Company network

  - storage-access-from-the-internet
    title: {target.name} exposed to the Internet
    severity: High
    categories: elevation-of-privilege, information-disclosure, tampering
    expression: (target.type == database) and (source within global-network)
    exclude: flow.inScope == false
    description: In case if {target.name} exposed to the Internet, it can be easily discovered by an attacker that usually lead to sensitive information disclosure or the whole system compromise
    remediation: 1. Do not expose {target.name} to the Internet directly if it is possible 2. Consider placing {target.name} in a secure isolated from internet access segment or in a internal private sub-net

  - dos-attack
    title: {target.name} Denial-of-Service (DoS) attack possibility
    severity: Medium
    categories: denial-of-service
    expression: ((target.type == proxyServer) or (target.type == webServer)) and (source within global-network)
    exclude: flow.inScope == false
    description: A Denial-of-Service (DoS) attack is an attack meant to shut down a machine or network, making it inaccessible to its intended users. DoS attacks accomplish this by flooding the target with traffic, or sending it information that triggers a crash
    remediation: 1. Create a DoS Response Plan 2. Continuous monitor the Network Traffic 3. Consider usage a specialized solutions like Cloudflare, AWS Shield, etc

  - sql-nosql-injection
    title: {target.name} (No)SQL Injection
    severity: High
    categories: information-disclosure, tampering
    expression: (target.type == database) and (source.type == webServer)
    exclude: flow.inScope == false
    description: Successful SQLi attacks allow attackers to modify database information, access sensitive data, execute admin tasks on the database, and recover files from the system. In some cases attackers can issue commands to the underlying database operating system.
    remediation: 1. If {source.name} application is developed by you, review that Object Relational Mapping Tools (ORMs) usage best practices are followed, sanitize user-provided input for special chars and use positive server-side input validation 2. In case {source.name} application is provided and maintained by 3rd-party Vendor, request the Vendor for the actual security and audit report that the application is developed according to the industry security best practices

  - ldap-injection
    title: LDAP Injection
    severity: High
    categories: information-disclosure, tampering
    expression: flow.authenticationMethod == ldap
    exclude: flow.inScope == false
    description: Successful LDAP injection attacks could result in the granting of permissions to unauthorized queries, and content modification inside the LDAP tree.
    remediation: 1. If the application is developed by you, review that you escape all variables using the right LDAP encoding function or use a framework (like LINQtoLDAP) that escapes automatically  2. In case the application is provided and maintained by 3rd-party Vendor, request the Vendor for the actual security and audit report that the application is developed according to the industry security best practices

  - cross-site-scripting
    title: {target.name} Cross-site scripting
    severity: High
    categories: information-disclosure, tampering
    expression: (target.type == webServer) and (source.type == interactor)
    exclude: flow.inScope == false
    description: Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data.
    remediation: 1. If {target.name} application is developed by you, review that you escape all output channels where user-provided input may be reflected 2. In case the application is provided and maintained by 3rd-party Vendor, request the Vendor for the actual security and audit report that the application is developed according to the industry security best practices