name: Default Threats Library
version: 1.0.0

rules:
  - information-discosure-in-transit
    title: Information Disclosure and Tampering in Transit for {flow.name}
    severity: High
    categories: information-disclosure, tampering
    expression: (flow.encryption == no) or (flow.encryption == undefined)
    exclude: flow.inScope == false
    description: In network eavesdropping attacks, hackers look for weak connections between clients and servers. By exploiting these weak connections, hackers intercept data packets traversing the network. Any network, web or email traffic, if not encrypted, can be read by the hacker.
    remediation: Ensure strong TLS is configured for the {flow.name} connection

  - information-discosure-at-rest
    title: Information Disclosure and Tampering at Rest for {target.name}
    severity: High
    categories: information-disclosure, tampering
    expression: (target.type == database) and ((target.storedAssets contain sensitive) or (target.storedAssets contain undefined))
    exclude: flow.inScope == false
    description: In case if an attacker can access lost, stolen, or inappropriately decommissioned hardware, the sensitive assets stored in {target.name} will be compromised
    remediation: 1. Ensure sensitive information is encrypted at rest level in {target.name} using recommended algorithms 2. Ensure encryption keys are properly protected (for example, stored at Vault)

  - anonymous-access
    title: Anonymous access to {target.name}
    severity: High
    categories: spoofing, information-disclosure
    expression: (flow.authenticationMethod == anonymous) or (flow.authenticationMethod == undefined)
    exclude: flow.inScope == false
    description: In case of if anonymous access to {target.name} is enabled, a potential attacker can gather additional information about the target using this public-available source
    remediation: 1. Enumerate all the publicly-accessible entrypoints on {target.name} 2. Consider access-control protection for the entrypoints with unwanted anonymous access

  - weak-authentication-method
    title: Weak authentication method for {target.name} access
    severity: High
    categories: spoofing
    expression: flow.authenticationMethod == undefined
    exclude: flow.inScope == false
    description: In case of of weak authentication for {target.name} connection, a potential attacker can easily spoof another users identity or gain access to any accounts credentials
    remediation: Consider usage of strong authentication method for {target.Name} access (OpenID, Kerberos, etc)

  - credentials-brute-force
    title: {target.name} credentials brute-force
    severity: High
    categories: spoofing
    expression: (flow.authenticationMethod == credentials) or (flow.authenticationMethod == basic)
    exclude: (flow.inScope == false) or (target.type == database)
    description: In case of of basic or simple password authentication on {target.name} side, a potential attacker can brute-force weak credentials and hijack any account
    remediation: 1. Consider usage of rate-limit protection on {target.name} side 2. (If applicable) Consider usage of MFA on {target.name} side

  - default-accout-disabling
    title: {target.name} default account disabling
    severity: High
    categories: spoofing, elevation-of-privilege
    expression: target.type == database
    exclude: flow.inScope == false
    description: A default account for {target.name} (for example, admin, root, sa, postgre, etc) may be used by an attacker to gain access to the information and assets stored in the storage
    remediation: Ensure the default account is not used or disabled/locked-out on {target.name} side

  - admin-access-hijacking
    title: {target.name} administrative access hijacking
    severity: High
    categories: spoofing, elevation-of-privilege
    expression: flow.authorization == admin
    exclude: flow.inScope == false
    description: In case if potential attacker can hijack administrative account to {target.name} or compromise it, he will gain an unlimited access to {target.name} data and functional assets
    remediation: 1. Consider protection of administrative accounts with MFA on {target.name} side if it is possible 2. Consider administrative account lockout, replacement by least-privilege account or permissions limitation

  - excessive-permissions
    title: {target.name} access with excessive permissions
    severity: High
    categories: elevation-of-privilege
    expression: (flow.authorization == admin) or (flow.authorization == readWrite)
    exclude: (flow.inScope == false) or (source.type == proxyServer)
    description: If {source.name} has excessive permissions (admin, root, etc) for {target.name} connection, in case of {source.name} compromise, a potential attacker can gain access to an extra permissions on {target.name}
    remediation: Ensure least-privilege account (for example, read-only) is used by {target.name} for {source.name} connection with fine-grained access only to the required operations and assets

  - local-account-management
    title: Local account management on {target.name}
    severity: High
    categories: spoofing, elevation-of-privilege
    expression: (flow.accountManagement == localAccount) or (flow.accountManagement == undefined)
    exclude: (flow.inScope == false) or (source within demilitarized-zone) or (source within closed-perimeter)
    description: In case of inappropriate account management on {target.name} side (for example, if account credentials are stored at {target.name} configuration file), it can lead to weak password complexity or rotation issues, that can be used by an attacker to brute force the credentials or for accounts enumeration
    remediation: Consider transferring the responsibility of account management to centralized SSO or Identity and Access Management system
